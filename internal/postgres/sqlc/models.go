// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type MembershipRole string

const (
	MembershipRoleOwner     MembershipRole = "owner"
	MembershipRoleInvited   MembershipRole = "invited"
	MembershipRoleRequested MembershipRole = "requested"
	MembershipRoleMember    MembershipRole = "member"
)

func (e *MembershipRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MembershipRole(s)
	case string:
		*e = MembershipRole(s)
	default:
		return fmt.Errorf("unsupported scan type for MembershipRole: %T", src)
	}
	return nil
}

type NullMembershipRole struct {
	MembershipRole MembershipRole
	Valid          bool // Valid is true if MembershipRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMembershipRole) Scan(value interface{}) error {
	if value == nil {
		ns.MembershipRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MembershipRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMembershipRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MembershipRole), nil
}

type TaskPriority string

const (
	TaskPriorityH    TaskPriority = "H"
	TaskPriorityM    TaskPriority = "M"
	TaskPriorityL    TaskPriority = "L"
	TaskPriorityNone TaskPriority = "none"
)

func (e *TaskPriority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskPriority(s)
	case string:
		*e = TaskPriority(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskPriority: %T", src)
	}
	return nil
}

type NullTaskPriority struct {
	TaskPriority TaskPriority
	Valid        bool // Valid is true if TaskPriority is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskPriority) Scan(value interface{}) error {
	if value == nil {
		ns.TaskPriority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskPriority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskPriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskPriority), nil
}

type TaskState string

const (
	TaskStateStarted   TaskState = "started"
	TaskStateWaiting   TaskState = "waiting"
	TaskStateCompleted TaskState = "completed"
	TaskStateDeleted   TaskState = "deleted"
)

func (e *TaskState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskState(s)
	case string:
		*e = TaskState(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskState: %T", src)
	}
	return nil
}

type NullTaskState struct {
	TaskState TaskState
	Valid     bool // Valid is true if TaskState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskState) Scan(value interface{}) error {
	if value == nil {
		ns.TaskState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskState), nil
}

type Project struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Title  string
}

type ProjectMembership struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
	Role      MembershipRole
}

type Task struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	ProjectID   uuid.NullUUID
	CompletedBy uuid.NullUUID
	Description string
	Priority    TaskPriority
	State       TaskState
	Deadline    time.Time
	Schedule    time.Time
	Wait        time.Time
	Create      time.Time
	End         time.Time
	Tags        []string
}

type TaskItem struct {
	ID              uuid.UUID
	UserID          uuid.UUID
	Username        string
	ProjectID       uuid.NullUUID
	ProjectTitle    string
	CompletedBy     uuid.NullUUID
	CompletedByName string
	Description     string
	Priority        TaskPriority
	State           TaskState
	Deadline        time.Time
	Schedule        time.Time
	Wait            time.Time
	Create          time.Time
	End             time.Time
	Tags            []string
	Urgency         pgtype.Numeric
}

type User struct {
	ID        uuid.UUID
	Username  string
	FirstName string
	LastName  string
	Email     string
	Password  string
	SignupAt  time.Time
	LastLogin time.Time
}
