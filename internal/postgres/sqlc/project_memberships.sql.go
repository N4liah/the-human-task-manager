// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: project_memberships.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const acceptMembership = `-- name: AcceptMembership :one
UPDATE project_memberships m
SET role = 'member'::membership_role
WHERE m.user_id = $1
AND m.project_id = $2
RETURNING user_id, project_id, role
`

type AcceptMembershipParams struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) AcceptMembership(ctx context.Context, arg AcceptMembershipParams) (ProjectMembership, error) {
	row := q.db.QueryRow(ctx, acceptMembership, arg.UserID, arg.ProjectID)
	var i ProjectMembership
	err := row.Scan(&i.UserID, &i.ProjectID, &i.Role)
	return i, err
}

const createMembership = `-- name: CreateMembership :one
INSERT INTO project_memberships(user_id, project_id, role)
VALUES ($1, $2, $3::membership_role)
RETURNING user_id, project_id, role
`

type CreateMembershipParams struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
	Role      MembershipRole
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (ProjectMembership, error) {
	row := q.db.QueryRow(ctx, createMembership, arg.UserID, arg.ProjectID, arg.Role)
	var i ProjectMembership
	err := row.Scan(&i.UserID, &i.ProjectID, &i.Role)
	return i, err
}

const deleteMembership = `-- name: DeleteMembership :one
DELETE FROM project_memberships
WHERE user_id = $1
AND project_id = $2
RETURNING user_id, project_id, role
`

type DeleteMembershipParams struct {
	UserID    uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) DeleteMembership(ctx context.Context, arg DeleteMembershipParams) (ProjectMembership, error) {
	row := q.db.QueryRow(ctx, deleteMembership, arg.UserID, arg.ProjectID)
	var i ProjectMembership
	err := row.Scan(&i.UserID, &i.ProjectID, &i.Role)
	return i, err
}

const membershipByIDs = `-- name: MembershipByIDs :one
SELECT user_id, project_id, role from project_memberships
WHERE project_id = $1
AND user_id = $2
`

type MembershipByIDsParams struct {
	ProjectID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) MembershipByIDs(ctx context.Context, arg MembershipByIDsParams) (ProjectMembership, error) {
	row := q.db.QueryRow(ctx, membershipByIDs, arg.ProjectID, arg.UserID)
	var i ProjectMembership
	err := row.Scan(&i.UserID, &i.ProjectID, &i.Role)
	return i, err
}

const membershipsByProjectID = `-- name: MembershipsByProjectID :many
SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.password, u.signup_at, u.last_login, p.id, p.user_id, p.title, role, COUNT (*) OVER()
FROM project_memberships m 
JOIN users u ON m.user_id = u.id
JOIN projects p ON m.project_id = p.id
WHERE m.project_id = $1
LIMIT $3 
OFFSET $2
`

type MembershipsByProjectIDParams struct {
	ProjectID uuid.UUID
	Noffset   int32
	Nlimit    int32
}

type MembershipsByProjectIDRow struct {
	User    User
	Project Project
	Role    MembershipRole
	Count   int64
}

func (q *Queries) MembershipsByProjectID(ctx context.Context, arg MembershipsByProjectIDParams) ([]MembershipsByProjectIDRow, error) {
	rows, err := q.db.Query(ctx, membershipsByProjectID, arg.ProjectID, arg.Noffset, arg.Nlimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MembershipsByProjectIDRow
	for rows.Next() {
		var i MembershipsByProjectIDRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Username,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.Email,
			&i.User.Password,
			&i.User.SignupAt,
			&i.User.LastLogin,
			&i.Project.ID,
			&i.Project.UserID,
			&i.Project.Title,
			&i.Role,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const membershipsByUserID = `-- name: MembershipsByUserID :many
SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.password, u.signup_at, u.last_login, p.id, p.user_id, p.title, role, COUNT(*) OVER()
FROM project_memberships m 
JOIN users u ON m.user_id = u.id
JOIN projects p ON m.project_id = p.id
WHERE m.user_id = $1
LIMIT $3
OFFSET $2
`

type MembershipsByUserIDParams struct {
	UserID  uuid.UUID
	Noffset int32
	Nlimit  int32
}

type MembershipsByUserIDRow struct {
	User    User
	Project Project
	Role    MembershipRole
	Count   int64
}

func (q *Queries) MembershipsByUserID(ctx context.Context, arg MembershipsByUserIDParams) ([]MembershipsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, membershipsByUserID, arg.UserID, arg.Noffset, arg.Nlimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MembershipsByUserIDRow
	for rows.Next() {
		var i MembershipsByUserIDRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Username,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.Email,
			&i.User.Password,
			&i.User.SignupAt,
			&i.User.LastLogin,
			&i.Project.ID,
			&i.Project.UserID,
			&i.Project.Title,
			&i.Role,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
