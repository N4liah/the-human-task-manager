// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: projects.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects ("id", "user_id", "title")
VALUES ($1, $2, $3)
RETURNING id, user_id, title
`

type CreateProjectParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Title  string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.ID, arg.UserID, arg.Title)
	var i Project
	err := row.Scan(&i.ID, &i.UserID, &i.Title)
	return i, err
}

const deleteProject = `-- name: DeleteProject :one
DELETE FROM projects
WHERE id = $1
RETURNING id, user_id, title
`

func (q *Queries) DeleteProject(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, deleteProject, id)
	var i Project
	err := row.Scan(&i.ID, &i.UserID, &i.Title)
	return i, err
}

const projectByID = `-- name: ProjectByID :one
SELECT id, user_id, title FROM projects
WHERE id = $1
`

func (q *Queries) ProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, projectByID, id)
	var i Project
	err := row.Scan(&i.ID, &i.UserID, &i.Title)
	return i, err
}

const projectsByUserID = `-- name: ProjectsByUserID :many
SELECT p.id, p.user_id, p.title, COUNT(*) OVER()  FROM projects p
WHERE user_id = $1
LIMIT $3 OFFSET $2
`

type ProjectsByUserIDParams struct {
	UserID  uuid.UUID
	Noffset int32
	Nlimit  int32
}

type ProjectsByUserIDRow struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Title  string
	Count  int64
}

func (q *Queries) ProjectsByUserID(ctx context.Context, arg ProjectsByUserIDParams) ([]ProjectsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, projectsByUserID, arg.UserID, arg.Noffset, arg.Nlimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectsByUserIDRow
	for rows.Next() {
		var i ProjectsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
