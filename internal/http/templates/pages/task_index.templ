package pages

import (
	"github.com/vixdang0x7d3/the-human-task-manager/internal/http/templates"
	"github.com/vixdang0x7d3/the-human-task-manager/internal/http/models"
	"strconv"
	"strings"
	"fmt"
	"github.com/vixdang0x7d3/the-human-task-manager/internal/domain"
)

templ FilterFormContent(oobResponse bool) {
	<div
		id="filter-form"
		class="flex w-full items-center gap-2 p-4"
		if oobResponse {
			hx-swap-oob="outerHTML"
		}
	>
		<div class="join">
			<div>
				<div>
					<input
						id="query"
						name="query"
						type="text"
						placeholder="Search query"
						class="input input-bordered grow join-item"
					/>
				</div>
			</div>
			<div>
				<input type="submit" class="btn join-item" value="Filter"/>
			</div>
		</div>
		<div class="dropdown dropdown-right dropdown-end">
			<div tabindex="0" role="button" class="btn m-1">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="size-6"
				>
					<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
				</svg>
			</div>
			<div
				tabindex="0"
				class="dropdown-content card card-compact bg-base-200 text-primary-content z-[1] w-80 p-2 shadow"
			>
				<div class="card-body">
					<h3 class="card-title">Filters:</h3>
					<div class="flex flex-row gap-4">
						<div class="flex flex-col w-6/12 gap-2">
							<select id="priority" name="priority" class="select select-bordered px-2">
								for _, p := range []string{
									domain.TaskPriorityH,
									domain.TaskPriorityM,
									domain.TaskPriorityL,
								} {
									<option value={ p }>{ p }</option>
								}
								<option selected value="">all</option>
							</select>
							<select id="state" name="state" class="select select-bordered px-2">
								<option selected hidden value="started">started</option>
								for _, s := range []string{
									domain.TaskStateStarted,
									domain.TaskStateWaiting,
									domain.TaskStateCompleted,
									domain.TaskStateDeleted,
								} {
									<option value={ s }>{ s }</option>
								}
								<option value="">all</option>
							</select>
						</div>
						<div class="flex flex-col gap-2">
							<label class="input input-bordered flex items-center gap-2">
								Days:
								<input
									id="days"
									name="days"
									type="number"
									class="grow"
									value="0"
									min="0"
									max="30"
								/>
							</label>
							<label class="input input-bordered flex items-center gap-2">
								Months:
								<input
									id="months"
									name="months"
									type="number"
									class="grow"
									value="0"
									min="0"
									max="12"
								/>
							</label>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ Filter() {
	<form
		hx-post="/tasks/find"
		hx-target="#task-list"
		hx-push-url="true"
	>
		@FilterFormContent(false)
	</form>
}

templ ProjectFilter(project models.ProjectView) {
	<form
		hx-post={ fmt.Sprintf("/project/%s/tab-tasks/find", project.ID) }
		hx-target="#project-task-list"
		hx-push-url="true"
	>
		@FilterFormContent(false)
	</form>
}

templ TaskBulkUpdateButtons() {
	<div class="flex gap-2">
		<button id="hyphon-btn" class="btn btn-square btn-xs">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class="size-6"
			>
				<path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14"></path>
			</svg>
		</button>
		<button id="arrow-down-btn" class="btn btn-square btn-xs">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class="size-6"
			>
				<path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5"></path>
			</svg>
		</button>
		<button id="wait-btn" class="btn btn-square btn-xs">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class="size-6"
			>
				<path stroke-linecap="round" stroke-linejoin="round" d="M14.25 9v6m-4.5 0V9M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
			</svg>
		</button>
		<button id="delete-btn" class="btn btn-square btn-xs">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class="size-6"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"
				></path>
			</svg>
		</button>
		<button id="complete-btn" class="btn btn-square btn-xs">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class="size-6"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					d="m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z"
				></path>
			</svg>
		</button>
	</div>
}

templ TaskPaginationButtons(pageOffset, pageTotal int) {
	<div id="pagination-buttons" class="flex gap-2">
		<button
			hx-get={ string(templ.SafeURL(fmt.Sprintf("/tasks?pageOffset=%d", pageOffset-1))) }
			hx-target="#task-list"
			id="prev-btn"
			if pageOffset > 0 {
				class="btn btn-xs btn-square"
			} else {
				class="btn btn-xs btn-square disabled"
				disabled
			}
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				class="h-4 w-4"
				fill="none"
				viewBox="0 0 24 24"
				stroke="currentColor"
			>
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
			</svg>
		</button>
		<span>(Page { fmt.Sprintf("%d/%d", pageOffset+1, pageTotal) })</span>
		<button
			hx-get={ string(templ.SafeURL(fmt.Sprintf("/tasks?pageOffset=%d", pageOffset+1))) }
			hx-target="#task-list"
			id="next-btn"
			if pageOffset+1 < pageTotal {
				class="btn btn-xs btn-square"
			} else {
				class="btn btn-xs btn-square"
				disabled
			}
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				class="h-4 w-4"
				fill="none"
				viewBox="0 0 24 24"
				stroke="currentColor"
			>
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
			</svg>
		</button>
	</div>
}

templ TaskButtonBar(pageOffset, pageTotal, taskTotal int) {
	<div class="flex justify-between items-center px-4 py-2">
		if true {
			<p id="show-total" class="text-base-content font-semibold">Total: {  strconv.Itoa(taskTotal) }</p>
		} else {
			<!--  TODO: implement bulk operations 
			@TaskBulkUpdateButtons()
			-->
		}
		@TaskPaginationButtons(pageOffset, pageTotal)
	</div>
}

script showModal(modalID string) {
	diag = document.querySelector(modalID)
	diag.showModal()
}

templ TaskItemButtons(m models.TaskItemView, inProjectPage bool) {
	<div class="flex flex-col justify-items-end gap-y-2 w-2/12">
		if m.State != domain.TaskStateDeleted {
			if m.State != domain.TaskStateCompleted {
				<a
					href={ templ.SafeURL(fmt.Sprintf("/tasks/update/%s", m.ID)) }
					class="btn btn-primary btn-xs"
				>Update</a>
				if !inProjectPage {
					<button
						class="btn btn-secondary btn-xs"
						onclick={ showModal(fmt.Sprintf("#set_project_dialog_%s", m.ID)) }
					>Set project</button>
				}
				if m.State != domain.TaskStateWaiting {
					<button
						hx-post={ string(templ.SafeURL(fmt.Sprintf("/tasks/complete/%s", m.ID))) }
						hx-target={ fmt.Sprintf("#task-item-%s", m.ID) }
						hx-replace-url="/tasks"
						hx-target-error="#alert"
						class="btn btn-accent btn-xs"
					>Complete</button>
				} else {
					<button
						if inProjectPage {
							id="start-task-project"
						}
						class="btn btn-accent btn-xs"
						hx-post={ string(templ.SafeURL(fmt.Sprintf("/tasks/start/%s", m.ID))) }
						hx-target={ fmt.Sprintf("#task-item-content-%s", m.ID) }
						hx-swap="outerHTML"
						hx-replace-url="/tasks"
						hx-target-error="#alert"
					>Start</button>
				}
			}
			<button
				hx-delete={ string(templ.SafeURL(fmt.Sprintf("/tasks/delete/%s", m.ID))) }
				hx-target={ fmt.Sprintf("#task-item-%s", m.ID) }
				hx-replace-url="/tasks"
				hx-target-error="#alert"
				class="btn btn-neutral btn-xs"
			>Delete</button>
		}
	</div>
}

templ TaskItemHidden(m models.TaskItemView, inProjectPage bool) {
	<span class="text-primary-content font-semibold">Details: </span>
	<div
		id={ fmt.Sprintf("task-item-hidden-%s", m.ID) }
		class="flex"
	>
		<div class="flex flex-col gap-y-2 w-4/12">
			<span class="badge badge-neutral">Create: { m.Create }</span>
			<span class="badge badge-primary">Deadline: { m.Deadline }</span>
			<span class="badge badge-secondary">Schedule: { m.Schedule }</span>
			<span class="badge badge-accent">Wait: { m.Wait }</span>
		</div>
		<div class="flex flex-col w-8/12">
			<span class="text-primary-content font-semibold">Project: { m.ProjectTitle }</span>
			<span class="text-primary-content font-semibold">Priority: { m.Priority }</span>
			<span class="text-primary-content font-semibold">
				Tags:
				for _, tag := range m.Tags {
					<span class="badge badge-secondary mx-1">{ tag }</span>
				}
			</span>
		</div>
		@TaskItemButtons(m, inProjectPage)
	</div>
}

templ TaskItemContent(m models.TaskItemView, inProjectPage bool) {
	<div
		if inProjectPage {
			id={ fmt.Sprintf("project-task-item-content-%s", m.ID) }
		} else {
			id={ fmt.Sprintf("task-item-content-%s", m.ID) }
		}
		tabindex="0"
		class="collapse bg-base-300 px-4"
	>
		<input type="checkbox"/>
		<div class="collapse-title h-16 py-4">
			<div class="grid grid-cols-4 justify-around">
				<span class="text-primary-content font-semibold">{ m.Description }</span>
				<span class="badge badge-primary font-bold">{ strings.ToUpper(m.State) }</span>
				<span class="text-primary-content font-semibold">Urgency: { m.Urgency }</span>
				if m.State == domain.TaskStateCompleted && inProjectPage {
					<span class="text-primary-content font-semibold">Completed by: { m.CompleteByName }</span>
				}
			</div>
		</div>
		<div class="collapse-content">
			@TaskItemHidden(m, inProjectPage)
		</div>
	</div>
}

templ SetProjectDialog(m models.TaskItemView, projects []models.ProjectView) {
	<dialog id={ fmt.Sprintf("set_project_dialog_%s", m.ID) } class="modal">
		<div class="modal-box">
			<h3 class="text-lg font-bold pb-2">Set project: </h3>
			<form
				class="flex items-center"
				hx-post={ string(templ.SafeURL(fmt.Sprintf("/tasks/set-project/%s", m.ID))) }
				hx-target={ fmt.Sprintf("#task-item-hidden-%s", m.ID) }
				hx-select={ fmt.Sprintf("#task-item-hidden-%s", m.ID) }
				hx-swap="outerHTML"
				hx-target-error="#error-text"
			>
				<div class="flex flex-col gap-2">
					<select
						id="project-id"
						name="project-id"
						class="select select-bordered grow m-4"
					>
						<option selected hidden value={ m.ProjectID }>{ m.ProjectTitle }</option>
						<option value="">Unset project (none)</option>
						for _, project := range projects {
							<option value={ project.ID }>{ project.Title } </option>
						}
					</select>
					<p class="#error-text"></p>
					<div class="modal-action">
						<input role="button" type="submit" class="btn btn-primary" value="Save"/>
					</div>
				</div>
			</form>
		</div>
		<form method="dialog" class="modal-backdrop">
			<button>close</button>
		</form>
	</dialog>
}

templ TaskItem(index int, m models.TaskItemView, projects []models.ProjectView) {
	<div id={ fmt.Sprintf("task-item-%s", m.ID) }>
		@SetProjectDialog(m, projects)
		<div class="indicator w-full">
			<span class="indicator-item indicator-start badge badge-accent">#{ strconv.Itoa(index) }</span>
			@TaskItemContent(m, false)
		</div>
	</div>
}

templ ProjectTaskItem(index int, m models.TaskItemView) {
	<div id={ fmt.Sprintf("project-task-item-%s", m.ID) }>
		<div class="indicator w-full">
			<span class="indicator-item indicator-start badge badge-accent">#{ strconv.Itoa(index) }</span>
			@TaskItemContent(m, true)
		</div>
	</div>
}

templ TaskIndex(
	m []models.TaskItemView,
	projects []models.ProjectView,
	pageOffset int,
	pageTotal int,
	taskTotal int,
	logoutURL string,
) {
	@templates.Boilerplate() {
		@templates.Head("Tasks") {
			<script src="https://unpkg.com/htmx-ext-response-targets@2.0.0/response-targets.js"></script>
		}
		<body hx-ext="response-targets">
			@templates.Navbar(logoutURL)
			<div id="alert" class="fixed top-12 right-4"></div>
			<div class="flex items-center justify-center py-4">
				<div class="flex flex-col w-10/12">
					<div class="flex justify-between items-center px-4 py-2 bg-base-100">
						<h1 class="text-4xl font-bold">Tasks</h1>
					</div>
					@Filter()
					<div class="card w-full bg-base-200 shadow-xl justify-center">
						<div class="card-body">
							@TaskButtonBar(pageOffset, pageTotal, taskTotal)
							<div id="task-list" class="p-4 max-h-80 w-full flex flex-col gap-y-2 overflow-y-scroll">
								for i, item := range(m) {
									@TaskItem(i, item, projects)
								}
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="fixed bottom-4 right-4">
				<a href="/tasks/new" class="btn btn-lg btn-primary font-semibold">+ Add Task</a>
			</div>
		</body>
	}
}
